var z = x == null ? "nope" : x.ToString();

// ?? => return nope if left side is null
var y = x?.ToString() ?? "nope";

Lamda ohne Return
Action<string,string> conditionalAppend = (property, value) =>
{ 
    if (value == null) return;
    SparqlUpdateStatement.AppendLine($"cp:{property} {value};);
};

Func: Lamda mit RÃ¼ckgabewert

Read: Delegaten

public static class StringBuilderExtension {
    public static void conditionalAppend<T>( this StringBuilder builder, string property, T value) {

        if (value == null) return;
        SparqlUpdateStatement.AppendLine($"cp:{property} {value};);

    }
}


SparqlUpdateStatement.conditionalAppend("title",dish.Title);


public Nullable<int> ServiceSize { get; set; }
 

             Console.WriteLine("Hello World!");
            var hello = new Class1();
            hello.Hello("C# is fancy");
            hello.HelloDefault();
            hello.HelloDefault("No default here");

            Model modell = new SubView();

/*
 Action<string> # Function without return code follows
 ( x )  =>   { }   # Function 

 Action setter = ( string y ) => { do stuff };

 */
            Action<string> setter = (x) => modell.modelname = x;
            setter("hello");


            modell.modelname = "Sandra";
            var sandra = modell.modelname;

            var view = new View();
            view.Viewname = "Benny";




Working insert data:
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX cp: <http://voiding-warranties.de/cookpot/1.0#>

INSERT DATA 
{ 
       cp:testin cp:name "Testing"@en.
       cp:serious_testing cp:name "Very Serious Testing"@en.
      
      _:TestRecipe001
      a cp:Dish;
        cp:title "Fancy Testrecipe"@en;
        cp:description "This is a Testrecipe to get fuseki sweating."@en;
        cp:origin cp:testin, cp:serious_testing;
}


functional - eigenschaft (richtung parent ->child ) kann nur einmal existieren 
inverse functional - eigenschaft (richtung child-> parent) kan nur 1x existieren
transitive - vererbung von parent -> child
symmetrisch  - vollduplex verbindung
asymmetrisch - gerichtete verbindung
reflexiv - verbindung die start und ende im selben objekt hat
irreflexiv - verbindung kann nicht im selben objekt enden wenn sie in ihm startet
